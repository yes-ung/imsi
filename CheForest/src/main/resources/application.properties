spring.application.name=CheForest
# \uC790\uBC14 \uC18C\uC2A4\uAC00 \uC218\uC815\uB418\uBA74 \uC11C\uBC84 \uC790\uB3D9 \uC7AC\uC2DC\uC791\uC744 \uD568
spring.devtools.restart.enabled=false
# \uC11C\uBC84 \uC7AC\uC2DC\uC791 \uC2DC \uB514\uC2A4\uD06C\uC5D0 \uC800\uC7A5\uB41C \uC138\uC158\uC744 \uBD88\uB7EC\uC624\uC9C0 \uC54A\uB3C4\uB85D \uC124\uC815 (\uAC1C\uBC1C \uD658\uACBD\uC5D0 \uC720\uC6A9)
server.servlet.session.persistent=false

# TODO: JSP \uC124\uC815
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

# Elasticsearch
spring.elasticsearch.uris=${ELASTIC_URI}

# TODO: DB \uB77C\uC774\uBE0C\uB7EC\uB9AC \uC124\uC815 : build.gradle \uC624\uB77C\uD074 db \uB77C\uC774\uBE0C\uB7EC\uB9AC \uC5C6\uC73C\uBA74 \uC5D0\uB7EC\uBC1C\uC0DD
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
# todo: spring.datasource.url=jdbc:oracle:thin:@ip??:db????/db??
spring.datasource.url=jdbc:oracle:thin:@${DB_HOST}:${DB_PORT}:${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASS}


# TODO: JPA ?? ??
# ddl \uC0DD\uC131 \uC635\uC158 : none(\uB044\uAE30), create(\uCF1C\uAE30), update(\uC5C6\uB294\uAC83\uB9CC \uB9CC\uB4E4\uAE30)
spring.jpa.hibernate.ddl-auto=none
# sql \uB85C\uADF8 \uCD9C\uB825
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE

# TODO: \uC5C5\uB85C\uB4DC \uD30C\uC77C \uC0AC\uC774\uC988 \uC81C\uD55C \uC124\uC815 : \uAE30\uBCF8(1MB \uAE4C\uC9C0)
#  file upload size \uC124\uC815
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# TODO: \uC5D0\uB7EC\uBA54\uC138\uC9C0 \uB4F1\uB85D \uD30C\uC77C \uC704\uCE58
spring.messages.basename=messages
spring.messages.encoding=UTF-8

# OAuth2 Social Login Settings
# Google Login
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.scope=profile,email

# Naver Login
# Registration (\uD074\uB77C\uC774\uC5B8\uD2B8 \uB4F1\uB85D \uC815\uBCF4)
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.naver.client-name=Naver
# Provider (\uC11C\uBE44\uC2A4 \uC81C\uACF5\uC790 \uC815\uBCF4)
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# Kakao Login
# Registration (\uD074\uB77C\uC774\uC5B8\uD2B8 \uB4F1\uB85D \uC815\uBCF4)
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
# Provider (\uC11C\uBE44\uC2A4 \uC81C\uACF5\uC790 \uC815\uBCF4)
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# Mail (Gmail SMTP)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

management.health.mail.enabled=false

# File upload root
file.upload.dir=/tmp/uploads

# \uC774\uBBF8\uC9C0 \uCE90\uC2F1\uC6A9 \uACBD\uB85C
recipe.image.root-path=${IMAGE_PATH}

# DeepL Translation
deepl.api.url=https://api-free.deepl.com/v2/translate
deepl.api.key=${DEEPL_API_KEY}

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration


# Spring Security\uC758 \uBAA8\uB4E0 \uB3D9\uC791\uC744 DEBUG \uB808\uBCA8\uB85C \uB85C\uAE45\uD569\uB2C8\uB2E4.
logging.level.org.springframework.security=DEBUG
# StompHandler\uAC00 \uC788\uB294 \uD328\uD0A4\uC9C0\uC758 \uB85C\uADF8 \uB808\uBCA8\uC744 DEBUG\uB85C \uC124\uC815\uD558\uC5EC \uBAA8\uB4E0 \uB85C\uADF8\uB97C \uD655\uC778\uD569\uB2C8\uB2E4.
logging.level.com.simplecoding.cheforest.jpa.config=DEBUG

